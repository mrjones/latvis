Application Architecture
========================

         +-----------------------------------+
         |            HTTP / SERVER          |
         | All HTTP (but non-OAuth) code     |
         +-----------------------------------+
                            |
                           \|/
         +-----------------------------------+
         |         LATVIS CONTROLLER         |
         | Currently called 'render_engine'  |
         +-----------------------------------+
           |                |              |
          \|/              \|/            \|/
     +-----------+  +---------------+  +---------+
     | DATAFETCH |  | VISUALIZATION |  | BLOBS   |
     | - OAuth   |  | - Interface + |  | Storage |
     | - Lat API |  |   Impls.      |  |         |
     +-----------+  +---------------+  +---------+


Building and Installing
=======================

TODO(mrjones): Update these given the split into appengine and non-appengine packages.

### Dependencies ###
goinstall -u github.com/mrjones/oauth
goinstall -u github.com/mrjones/gt

### Running a vanilla/local server ###
$ go run localserver/localserver.go
Runs it on port 8081 (This should be a flag).

### Running a dev appengine server ###
$ sudo apt-get install python-mysqldb
$ sudo apt-get install python-imaging
$ appengineserver/appengine.sh run

### Uploading to the real appengine server ###
appcfg.py update .


List of significant TODOs
=========================
- Remove configHolder/inited from datafetch.go
- Cleanup the sometimes extraneous need for callbackUrl in datafetch.go
- Tests for the DataFetch module
- Differentiate between in-progress Blob lookup and actual errors
- Automate, or at least clean up all the URL marshalling and unmarshalling
- Create more visualizers
- Make sure RenderEngine isn't coupled to server.go by writing a command-line version of Latvis
- Bring back localserver.go (non-Appengine HTTP server)
- Fix TextAuthorization in server_test.go
